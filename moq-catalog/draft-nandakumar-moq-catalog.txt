



Media Over QUIC                                            S. Nandakumar
Internet-Draft                                                     Cisco
Intended status: Informational                                    W. Law
Expires: 2 March 2024                                             Akamai
                                                               M. Zanaty
                                                                   Cisco
                                                          30 August 2023


          Catalog Specification for Media Over QUIC Transport
                  draft-nandakumar-moq-catalog-latest

Abstract

   Media over QUIC Transport (MOQT) defines a publish/subscribe based
   unified media delivery protocol for delivering media for streaming
   and interactive applications over QUIC.  This specification defines
   an interoperable Catalog specification for streaming formats
   implementing the MOQ Transport Protocol [MoQTransport].  The Catalog
   describes the content made available by a publisher, including
   information necessary for track selection, subscription and
   initialization.

About This Document

   This note is to be removed before publishing as an RFC.

   Status information for this document may be found at
   https://datatracker.ietf.org/doc/draft-nandakumar-moq-catalog/.

   Discussion of this document takes place on the Media Over QUIC
   Working Group mailing list (mailto:moq@ietf.org), which is archived
   at https://mailarchive.ietf.org/arch/browse/moq/.  Subscribe at
   https://www.ietf.org/mailman/listinfo/moq/.

   Source for this draft and an issue tracker can be found at
   https://github.com/suhasHere/moq-catalog.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 2 March 2024.

Copyright Notice

   Copyright (c) 2023 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Revised BSD License text as
   described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Revised BSD License.

Table of Contents

   1.  Introduction
   2.  Conventions and Definitions
   3.  Catalog
     3.1.  Catalog Fields
       3.1.1.  Streaming format
       3.1.2.  Streaming format version
       3.1.3.  Tracks
       3.1.4.  Tracks object
       3.1.5.  Parent sequence number
       3.1.6.  Track namespace
       3.1.7.  Track name
       3.1.8.  Packaging
       3.1.9.  Track operations
       3.1.10. Track priority
       3.1.11. Track label
       3.1.12. Render group
       3.1.13. Alternate group
       3.1.14. Dependencies
       3.1.15. Initialization data
       3.1.16. Initialization track
       3.1.17. Selection parameters
       3.1.18. Codec
       3.1.19. Mimetype
       3.1.20. Framerate
       3.1.21. Bitrate
       3.1.22. Audio sample rate
       3.1.23. Width
       3.1.24. Height
       3.1.25. Channel configuration
       3.1.26. Display width
       3.1.27. Display height
       3.1.28. Language
       3.1.29. Temporal ID
       3.1.30. Spatial ID
       3.1.31. Time aligned
     3.2.  Catalog Delta Updates
     3.3.  Catalog Examples
       3.3.1.  Lip Sync Audio/Video Tracks with single quality
       3.3.2.  Simulcast video tracks - 3 alternate qualities along
               with audio
       3.3.3.  Delta update adding a track
       3.3.4.  Delta update removing a track
       3.3.5.  Delta update removing all tracks and terminating
               broadcast
       3.3.6.  CMAF Tracks with multiple qualities of audio and video
       3.3.7.  Mixed format example - CMAF and LOC packaging in the
               same catalog
   4.  Security Considerations
   5.  IANA Considerations
     5.1.  MoQ Streaming Format Type Registry
   Acknowledgments
   Normative References
   Authors' Addresses

1.  Introduction

   MOQT [MoQTransport] defines a transport protocol that utilizes the
   QUIC network protocol [QUIC] and WebTransport[WebTrans] to move
   objects between publishers, subscribers and intermediaries.  Tracks
   are identified using a tuple of the Track Namespace and the Track
   Name.  A MOQT Catalog is a specialized track which captures details
   of all the tracks output by a publisher, including the identities,
   media profiles, initialization data and inter-track relationships.
   The mapping of media characteristics of objects with the tracks, as
   well as relative prioritization of those objects, are captured in
   separate MoQ Streaming Format specifications.  This specification
   defines a JSON encoded catalog.

   *  Section 3 describes the MoQ Catalog format including examples.

2.  Conventions and Definitions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in RFC
   2119 [RFC2119].

3.  Catalog

   A Catalog is a MOQT Object that provides information about tracks
   from a given publisher.  A Catalog is used by publishers for
   advertising their output and for subscribers to consume that output.
   The payload of the Catalog object is opaque to Relays and can be end-
   to-end encrypted.  The Catalog provides the names and namespaces of
   the tracks being produced, along with the relationship between
   tracks, properties of the tracks that consumers may use for selection
   and any relevant initialization data.

3.1.  Catalog Fields

   A catalog is a JSON [JSON] document, comprised of a series of
   mandatory and optional fields.  At a minimum, a catalog MUST provide
   all mandatory fields.  A producer MAY add additional fields to the
   ones described in this draft.  Custom field names MUST NOT collide
   with field names described in this draft.  To prevent custom field
   name collisions with future versions, custom field names SHOULD be
   prefixed using reverse domain name notation e.g "com.example-size".
   The order of field names within the JSON document is not important.
   Any track field declared at the root level is inherited by all
   tracks.  Any track field declared within a track overwrites any
   inherited value.

   A parser MUST ignore fields it does not understand.

   Table 1 provides an overview of all fields defined by this document.

   +=================+======+==========+==========+======+=============+
   | Field           |Name  | Required | Location |JSON  | Definition  |
   |                 |      |          |          |type  |             |
   +=================+======+==========+==========+======+=============+
   | Streaming       |f     | yes      | R        |Number| See Section |
   | format          |      |          |          |      | 3.1.1       |
   +-----------------+------+----------+----------+------+-------------+
   | Streaming       |v     | yes      | R        |String| See Section |
   | format version  |      |          |          |      | 3.1.2       |
   +-----------------+------+----------+----------+------+-------------+
   | Tracks          |tracks| yes      | R        |Array | See Section |
   |                 |      |          |          |      | 3.1.3       |
   +-----------------+------+----------+----------+------+-------------+
   | Parent          |psn   | opt      | R        |Array | See Section |
   | sequence        |      |          |          |      | 3.1.5       |
   | number          |      |          |          |      |             |
   +-----------------+------+----------+----------+------+-------------+
   | Track           |ns    | yes      | RT       |String| See Section |
   | namespace       |      |          |          |      | 3.1.6       |
   +-----------------+------+----------+----------+------+-------------+
   | Track name      |n     | yes      | RT       |String| See Section |
   |                 |      |          |          |      | 3.1.7       |
   +-----------------+------+----------+----------+------+-------------+
   | Packaging       |p     | yes      | RT       |String| See Section |
   |                 |      |          |          |      | 3.1.8       |
   +-----------------+------+----------+----------+------+-------------+
   | Track           |op    | yes      | RT       |Number| See Section |
   | operation       |      |          |          |      | 3.1.9       |
   +-----------------+------+----------+----------+------+-------------+
   | Track priority  |p     | opt      | RT       |Number| See Section |
   |                 |      |          |          |      | 3.1.10      |
   +-----------------+------+----------+----------+------+-------------+
   | Track label     |lb    | opt      | RT       |String| See Section |
   |                 |      |          |          |      | 3.1.11      |
   +-----------------+------+----------+----------+------+-------------+
   | Render group    |gr    | opt      | RT       |Number| See Section |
   |                 |      |          |          |      | 3.1.12      |
   +-----------------+------+----------+----------+------+-------------+
   | Alternate       |alt   | opt      | RT       |Number| See Section |
   | group           |      |          |          |      | 3.1.13}     |
   +-----------------+------+----------+----------+------+-------------+
   | Dependencies    |alt   | opt      | RT       |Array | See Section |
   |                 |      |          |          |      | 3.1.14}     |
   +-----------------+------+----------+----------+------+-------------+
   | Initialization  |ind   | opt      | RT       |String| See Section |
   | data            |      |          |          |      | 3.1.15      |
   +-----------------+------+----------+----------+------+-------------+
   | Initialization  |init  | opt      | RT       |String| See Section |
   | track           |      |          |          |      | 3.1.16      |
   +-----------------+------+----------+----------+------+-------------+
   | Temporal ID     |tid   | opt      | RT       |Number| See Section |
   |                 |      |          |          |      | 3.1.29      |
   +-----------------+------+----------+----------+------+-------------+
   | Spatial ID      |sid   | opt      | RT       |Number| See Section |
   |                 |      |          |          |      | 3.1.30      |
   +-----------------+------+----------+----------+------+-------------+
   | Selection       |sp    | opt      | RT       |Object| See Section |
   | parameters      |      |          |          |      | 3.1.17      |
   +-----------------+------+----------+----------+------+-------------+
   | Codec           |c     | opt      | S        |String| See Section |
   |                 |      |          |          |      | 3.1.18      |
   +-----------------+------+----------+----------+------+-------------+
   | Mime type       |mt    | opt      | S        |String| See Section |
   |                 |      |          |          |      | 3.1.19      |
   +-----------------+------+----------+----------+------+-------------+
   | Framerate       |fr    | opt      | S        |Number| See Section |
   |                 |      |          |          |      | 3.1.20      |
   +-----------------+------+----------+----------+------+-------------+
   | Bitrate         |br    | opt      | S        |Number| See Section |
   |                 |      |          |          |      | 3.1.21      |
   +-----------------+------+----------+----------+------+-------------+
   | Width           |wd    | opt      | S        |Number| See Section |
   |                 |      |          |          |      | 3.1.23      |
   +-----------------+------+----------+----------+------+-------------+
   | Height          |ht    | opt      | S        |Number| See Section |
   |                 |      |          |          |      | 3.1.24      |
   +-----------------+------+----------+----------+------+-------------+
   | Audio sample    |sr    | opt      | S        |Number| See Section |
   | rate            |      |          |          |      | 3.1.22      |
   +-----------------+------+----------+----------+------+-------------+
   | Channel         |cc    | opt      | S        |String| See Section |
   | configuration   |      |          |          |      | 3.1.25      |
   +-----------------+------+----------+----------+------+-------------+
   | Display width   |dw    | opt      | S        |Number| See Section |
   |                 |      |          |          |      | 3.1.26      |
   +-----------------+------+----------+----------+------+-------------+
   | Display height  |dh    | opt      | S        |Number| See Section |
   |                 |      |          |          |      | 3.1.27      |
   +-----------------+------+----------+----------+------+-------------+
   | Language        |la    | opt      | S        |String| See Section |
   |                 |      |          |          |      | 3.1.28      |
   +-----------------+------+----------+----------+------+-------------+

                                  Table 1

   Required: 'yes' indicates a mandatory field, 'opt' indicates an
   optional field Location: 'R' - the field is located in the root of
   the JSON object, 'RT' - the field may be located in either the root
   or a track object, "S" - the field is located in the Selection
   Properties object.

3.1.1.  Streaming format

   A number indicating the streaming format type.  Every MoQ Streaming
   Format normatively referencing this catalog format MUST register
   itself in the "MoQ Streaming Format Type" table.  See {#iana} for
   additional details.

3.1.2.  Streaming format version

   A string indicating the version of the streaming format to which this
   catalog applies.  The structure of the version string is defined by
   the streaming format.

3.1.3.  Tracks

   An array of track objects {#trackobject}

3.1.4.  Tracks object

   A track object is a collection of fields whose location is specified
   as 'RT' in Table 1.

3.1.5.  Parent sequence number

   A number specifying the moq-transport object number from which this
   catalog represents a delta update.  See {#deltaupdate} for additional
   details.  Absence of this parent sequence number indicates that this
   catalog is independent and completely describes the content available
   in the broadcast.

3.1.6.  Track namespace

   The name space under which the track name is defined.  See section
   2.3 of [MoQTransport].  The track namespace is required to be
   specified for each track object.  If the track namespace is declared
   in the root of the JSON document, then its value is inherited by all
   tracks and it does not need to be re-declared within each track
   object.  A namespace declared in a track object overwrites any
   inherited name space.

3.1.7.  Track name

   A string defining the name of the track.  See section 2.3 of
   [MoQTransport]

3.1.8.  Packaging

   A string defining the type of payload encapsulation.  Allowed values
   are strings as defined in Table 2.

   Table 2: Allowed packaging values

                     +======+========+==============+
                     | Name | Value  | Draft        |
                     +======+========+==============+
                     | CMAF | "cmaf" | See RFC XXXX |
                     +------+--------+--------------+
                     | LOC  | "loc"  | See RFC XXXX |
                     +------+--------+--------------+

                                 Table 2

3.1.9.  Track operations

   Each track description can specify an optional operation value that
   identifies the catalog producer's intent.  Track operation is a
   enumeration of values as defined below.

   *  Add: Indicates the track is added to the catalog and the consumers
      of the catalog may subscribe to the track.

   *  Delete: Indicates that media producer is no longer producing media
      on the associated track.

   A catalog update in which all previously added tracks are deleted
   SHOULD be interpreted by a subscriber to indicate that the publisher
   has terminated the broadcast.

   Table 3 defines the numerical values for the track operations.

   Table 3: Allowed track operations

                    +========+=======+===============+
                    | Name   | Value | Default value |
                    +========+=======+===============+
                    | Add    | 1     | yes           |
                    +--------+-------+---------------+
                    | Delete | 0     |               |
                    +--------+-------+---------------+

                                 Table 3

   The default track operation is 'Add'.  This value does not need to be
   declared in the track object.

3.1.10.  Track priority

   A number indicating the relative priority of the track.  See section
   X.X of [MoQTransport].

3.1.11.  Track label

   A string defining a human-readable label for the track.  Examples
   might be "Overhead camera view" or "Deutscher Kommentar".  Note that
   [JSON] spec requires UTF-8 support by decoders.

3.1.12.  Render group

   An integer specifying a group of tracks which are designed to be
   rendered together.  Tracks with the same group number SHOULD be
   rendered simultaneously and are designed to accompany one another.  A
   common example would be tying together audio and video tracks.

3.1.13.  Alternate group

   An integer specifying a group of tracks which are alternate versions
   of one-another.  Alternate tracks represent the same media content,
   but differ in their selection properties.  Alternate tracks SHOULD
   have matching framerate Section 3.1.20 and media time sequences.  A
   subscriber SHOULD only subscribe to one track from a set of tracks
   specifying the same alternate group number.  A common example would
   be a video tracks of the same content offered in alternate bitrates.

3.1.14.  Dependencies

   Certain tracks may depend on other tracks for decoding.  Dependencies
   holds an array of track names Section 3.1.7 on which the current
   track is dependent.  Since only the track name is signaled, the
   namespace of the dependencies is assumed to match that of the track
   declaring the dependencies.

3.1.15.  Initialization data

   A string holding Base64 [BASE64] encoded initialization data for the
   track.

3.1.16.  Initialization track

   A string specifying the track name of another track which holds
   initialization data for the current track.  Initialization tracks
   MUST NOT be added to the tracks array Section 3.1.3.  They are
   referenced only via the initialization track field of the track which
   they initialize.

3.1.17.  Selection parameters

   An object holding a series of name/value pairs which a subscriber can
   use to select tracks for subscription.  If present, the selection
   parameters object MUST NOT be empty.  Any selection parameters
   declared at the root level are inherited by all tracks.  A selection
   parameters object may exist at both the root and track level.  Any
   declaration of a selection parameter at the track level overrides the
   inherited root value.

3.1.18.  Codec

   A string defining the codec used to encode the track.  For LOC
   packaged content, the string codec registrations are defined in Sect
   3 and Section 4 of [WEBCODECS-CODEC-REGISTRY].  For CMAF packaged
   content, the string codec registrations are defined in XXX.

3.1.19.  Mimetype

   A string defining the mime type [MIME] of the track.  This parameter
   is typically supplied with CMAF packaged content.

3.1.20.  Framerate

   A number defining the framerate of the track, expressed as frames per
   second.

3.1.21.  Bitrate

   A number defining the bitrate of track, expressed in bits second.

3.1.22.  Audio sample rate

   The number of audio frame samples per second.  This property SHOULD
   only accompany audio codecs.

3.1.23.  Width

   A number expressing the encoded width of the track content in pixels.

3.1.24.  Height

   A number expressing the encoded height of the video frames in pixels.

3.1.25.  Channel configuration

   A string specifying the audio channel configuration.  This property
   SHOULD only accompany audio codecs.  A string is used in order to
   provide the flexibility to describe complex channel configurations
   for multi-channel and Next Generation Audio schemas.

3.1.26.  Display width

   A number expressing the intended display width of the track content
   in pixels.

3.1.27.  Display height

   A number expressing the intended display height of the track content
   in pixels.

3.1.28.  Language

   A string defining the dominant language of the track.  The string
   MUST be one of the standard Tags for Identifying Languages as defined
   by [LANG].

3.1.29.  Temporal ID

   A number identifying the temporal layer/sub-layer encoding of the
   track, starting with 0 for the base layer, and increasing with higher
   temporal fidelity.

3.1.30.  Spatial ID

   A number identifying the spatial layer encoding of the track,
   starting with 0 for the base layer, and increasing with higher
   fidelity.

3.1.31.  Time aligned

   An array of track names intended for synchronized playout.  An
   example would be audio and video media synced for playout in a
   conference setting.  TODO - are these the same as groups?

3.2.  Catalog Delta Updates

   A catalog might contain incremental changes.  This is a useful
   property if many tracks may be initially declared but then there are
   small changes to a subset of tracks.  The producer can issue a delta
   update to describe these small changes.  Changes are described
   incrementally, meaning that a delta-update can itself depend on a
   previous delta update.

   The following rules MUST be followed by subscribers in processing
   delta updates:

   *  If a catalog is received without the parent sequence number field
      {#parentsequencenumber} defined, then it is an independent catalog
      and no delta update processing is required.

   *  If a catalog is received with a parent sequence number field
      present, then the content of the catalog MUST be parsed as if the
      catalog contents had been added to the contents received on the
      referenced moq-transport object.  Newer field definitions
      overwrite older field definitions.

   *  Track namespaces may not be changed across delta updates.

   *  Contents of the track selection properties object may not be
      varied across updates.  To adjust a track selection property, the
      track must first be removed and then added with the new selection
      properties and a different name.

   *  Track names may not be changed across delta updates.  To change a
      track name, remove the track and then add a new track with the new
      name and matching properties.

3.3.  Catalog Examples

   The following section provides non-normative JSON examples of various
   catalogs compliant with this draft.

3.3.1.  Lip Sync Audio/Video Tracks with single quality

   This example shows catalog for the media sender, Alice, capable of
   sending LOC packaged, lip-synced audio and video tracks.

   {
     "f": 1,
     "v": "0.2",
     "ns": "conference.example.com/conference123/alice",
     "p": "loc",
     "gr":1,
     "tracks": [
       {
         "n": "video",
         "sp":{"c":"av01.0.08M.10.0.110.09","wd":1920,"ht":1080,"fr":30,"br":1500000}
       },
       {
         "n": "audio",
         "sp":{"c":"opus","sr":48000,"cc":"2","br":32000}
       }
      ]
   }

3.3.2.  Simulcast video tracks - 3 alternate qualities along with audio

   This example shows catalog for the media sender, Alice, capable of
   sending 3 time-aligned video tracks for high definition, low
   definition and medium definition qualities, along with an audio
   track.

   {
     "f": 1,
     "v": "0.2",
     "ns": "conference.example.com/conference123/alice",
     "sp": {"c":"av01"},
     "gr": 1,
     "tracks":[
       {

         "n": "hd",
         "sp": {"wd":1920,"ht":1080,"br":5000000,"fr":30},
         "alt":1
       },
       {
         "n": "md",
         "sp": {"wd":720,"ht":640,"br":3000000,"fr":30},
         "alt":1
       },
       {
         "n": "sd",
         "sp": {"wd":192,"ht":144,"br":500000,"fr":30},
         "alt":1
       },
       {
         "n": "audio",
         "sp":{"c":"opus","sr":48000,"cc":"2","br":32000},
       }
      ]
   }

3.3.3.  Delta update adding a track

   This example shows catalog for the media sender, Alice, adding a
   slide track to an established video conference

   {
     "psn":0,
     "tracks": [
       {
         "n": "slides",
         "sp":{"c":"av01.0.08M.10.0.110.09","wd":1920,"ht":1080,"fr":15,"br":750000},
         "gr":1
       }
      ]
   }

3.3.4.  Delta update removing a track

   This example shows delat catalog update for the media sender, Alice,
   removing a slide track from an established video conference

   {
     "psn":1,
     "tracks": [
       {
         "n": "slides",
         "op": 0
       }
      ]
   }

3.3.5.  Delta update removing all tracks and terminating broadcast

   This example shows a delta catalog update for the media sender,
   Alice, removing all tracks and terminating her broadcast.

   {
     "psn":2,
     "op": 0,
     "tracks": [{"n": "audio"},{"n": "video"},{"n": "slides"}]
   }

3.3.6.  CMAF Tracks with multiple qualities of audio and video

   This example shows catalog for a sports broadcast sending time-
   aligned audio and video tracks using CMAF packaging.  Init segments
   are delivered as separate tracks.

   {
     "f": 1,
     "v": "0.2",
     "ns": "sports.example.com/games/08-08-23/12345",
     "p": "cmaf",
     "gr":1,
     "tracks": [
       {
         "n": "video_4k",
         "sp":{"c":"avc1.640033","mt":"video/mp4","wd":3840,"ht":2160,"fr":30,"br":14931538},
         "init":"init_video_4k",
         "alt": 1
       },
       {
         "n": "video_1080",
         "sp":{"c":"avc1.640028","mt":"video/mp4","wd":1920,"ht":1080,"fr":30,"br":9914554},
         "init":"init_video_1080",
         "alt": 1
       },
       {
         "n": "video_720",
         "sp":{"c":"avc1.64001f","mt":"video/mp4","wd":1280,"ht":720,"fr":30,"br":4952892},
         "init":"init_video_720",
         "alt": 1
       },
       {
         "n": "audio_aac",
         "sp":{"c":"mp4a.40.5","mt":"audio/mp4","sr":48000,"cc":"2","br":67071},
         "init":"init_audio_aac",
         "alt": 2
       },
       {
         "n": "audio_ec3",
         "sp":{"c":"ec-3","mt":"audio/mp4","sr":48000,"cc":"F801","br":256000},
         "init":"init_audio_ec3",
         "alt": 2
       }
      ]
   }

3.3.7.  Mixed format example - CMAF and LOC packaging in the same
        catalog

   This example shows catalog describing a broadcast with CMAF packaged
   video and LOC packaged audio.

   {
     "f": 1,
     "v": "0.2",
     "ns": "output.example.com/event/12345",
     "gr":1
     "tracks": [
       {
         "n": "video0",
         "sp":{"c":"avc1.64001f","mt":"video/mp4","wd":1280,"ht":720,"fr":30,"br":4952892},
         "init":"init_video_720",
         "p":"loc",
       },
       {
         "n": "audio",
         "sp":{"c":"opus","sr":48000,"cc":"2","br":32000},
         "p": "loc",
       }
      ]
   }

4.  Security Considerations

   The catalog contents MAY be encrypted.  The mechanism of encryption
   and the signalling of the keys are left to the Streaming Format
   referencing this catalog format.

5.  IANA Considerations

   This section details how the MoQ Streaming Format Type can be
   registered.  The type registry can be updated by incrementally
   expanding the type space, i.e., by allocating and reserving new type
   identifiers.  As per [RFC8126], this section details the creation of
   the "MoQ Streaming Format Type" registry.

5.1.  MoQ Streaming Format Type Registry

   This document creates a new registry, "MoQ Streaming Format Type".
   The registry policy is "RFC Required".  The Type value is 2 octets.
   The range is 0x0000-0xFFFF.  The initial entry in the registry is:

        +--------+-------------+----------------------------------+
        | Type   |     Name    |            RFC                   |
        +--------+-------------+----------------------------------+
        | 0x0000 |   Reserved  |                                  |
        +--------+-------------+----------------------------------+

   Every MoQ streaming format draft normatively referencing this catalog
   format MUST register itself a unique type identifier.

Acknowledgments

   The IETF MoQ mailing lists and discussion groups.

Normative References

   [BASE64]   Josefsson, S., "The Base16, Base32, and Base64 Data
              Encodings", RFC 4648, DOI 10.17487/RFC4648, October 2006,
              <https://www.rfc-editor.org/rfc/rfc4648>.

   [CMAF]     "Information technology -- Multimedia application format
              (MPEG-A) -- Part 19: Common media application format
              (CMAF) for segmented media", March 2020.

   [Framemarking]
              Zanaty, M., Berger, E., and S. Nandakumar, "Video Frame
              Marking RTP Header Extension", Work in Progress, Internet-
              Draft, draft-ietf-avtext-framemarking-15, 26 July 2023,
              <https://datatracker.ietf.org/doc/html/draft-ietf-avtext-
              framemarking-15>.

   [JSON]     Bray, T., Ed., "The JavaScript Object Notation (JSON) Data
              Interchange Format", STD 90, RFC 8259,
              DOI 10.17487/RFC8259, December 2017,
              <https://www.rfc-editor.org/rfc/rfc8259>.

   [LANG]     Phillips, A., Ed. and M. Davis, Ed., "Tags for Identifying
              Languages", BCP 47, RFC 5646, DOI 10.17487/RFC5646,
              September 2009, <https://www.rfc-editor.org/rfc/rfc5646>.

   [MIME]     Freed, N., Klensin, J., and T. Hansen, "Media Type
              Specifications and Registration Procedures", BCP 13,
              RFC 6838, DOI 10.17487/RFC6838, January 2013,
              <https://www.rfc-editor.org/rfc/rfc6838>.

   [MoQTransport]
              Curley, L., Pugin, K., Nandakumar, S., and V. Vasiliev,
              "Media over QUIC Transport", Work in Progress, Internet-
              Draft, draft-ietf-moq-transport-00, 5 July 2023,
              <https://datatracker.ietf.org/doc/html/draft-ietf-moq-
              transport-00>.

   [WebCodecs]
              "WebCodecs", July 2023,
              <https://www.w3.org/TR/webcodecs/>.

   [WEBCODECS-CODEC-REGISTRY]
              "WebCodecs Codec Registry", July 2023,
              <https://www.w3.org/TR/webcodecs-codec-registry/>.

Authors' Addresses

   Suhas Nandakumar
   Cisco
   Email: snandaku@cisco.com


   Will Law
   Akamai
   Email: wilaw@akamai.com


   Mo Zanaty
   Cisco
   Email: mzanaty@cisco.com
